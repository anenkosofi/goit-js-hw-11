{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,S,0BAMA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,gBAC7BC,iBAAkBF,SAASC,cAAc,YACzCE,QAASH,SAASC,cAAc,WASlC,IAAIG,EAAa,GACbC,GAAa,EAEjB,MAAMC,EAAmB,IAAI,EAAAV,EAAAW,SAEvBC,EAAW,IAAIC,sBAErB,SAA0BC,EAASC,GACjCD,EAAQE,SAAQC,IACVA,EAAMC,iBAAmBT,GAC3BU,GAAa,G,GAhBH,CACdC,KAAM,KACNC,WAAY,QACZC,UAAW,IAyCb,SAASH,IACPV,GAAa,EACbC,EAAiBa,cAAcC,MAAK,EAACC,UAAEA,EAASC,KAAEA,MAChD,GAAIlB,EAAaiB,EAKf,OAJAb,EAASe,UAAUzB,EAAKK,cACxBqB,EAAAC,GAASC,OAAOC,QACd,8DAGG,GAAoB,IAAhBL,EAAKM,OAKT,CACLJ,EAAAC,GAASC,OAAOG,QAAQ,oBAAoBzB,aAiBlD,SAA2B0B,GACzB,MAAMC,EAASD,EACZE,KACCC,GACE,wCACKA,EAAMC,wDACHD,EAAME,sBAAsBF,EAAMG,+FAGXH,EAAMI,mDACNJ,EAAMK,sDACHL,EAAMM,0DACLN,EAAMM,mCAI5CC,KAAK,IAER1C,EAAKI,iBAAiBuC,mBAAmB,YAAaV,E,CAjClDW,CAAkBpB,GAED,IAAIE,EAAAmB,GAAJ,CAAmB,aAAc,CAChDC,aAAc,MACdC,aAAc,MAGPC,UAET1C,GAAckB,EAAKM,OACnBvB,GAAa,C,MAjBbmB,EAAAC,GAASC,OAAOC,QACd,2E,IAlCR7B,EAAKC,KAAKgD,iBAAiB,UAE3B,SAAkBC,GAKhB,GAJAA,EAAEC,iBAEF3C,EAAiB4C,MAAQF,EAAEG,cAAcC,SAASC,YAAYC,OAEzDhD,EAAiB4C,MAIpB,YAHA1B,EAAAC,GAASC,OAAOC,QACd,sDAKJrB,EAAiBiD,YA+DjBzD,EAAKI,iBAAiBsD,UAAY,GA5DlCzC,IACAP,EAASiD,QAAQ3D,EAAKK,SAEtBL,EAAKC,KAAK2D,O","sources":["src/js/02-infinite-scroll.js"],"sourcesContent":["import ImagesApiService from './images-service';\nimport '../css/styles.css';\nimport Notiflix from 'notiflix';\nimport SimpleLightbox from 'simplelightbox';\nimport 'simplelightbox/dist/simple-lightbox.min.css';\n\nconst refs = {\n  form: document.querySelector('.search-form'),\n  galleryContainer: document.querySelector('.gallery'),\n  jsGuard: document.querySelector('.guard'),\n};\n\nconst options = {\n  root: null,\n  rootMargin: '300px',\n  threshold: 1.0,\n};\n\nlet hitsLength = 40;\nlet isFetching = false;\n\nconst imagesApiService = new ImagesApiService();\n\nconst observer = new IntersectionObserver(onInfiniteScroll, options);\n\nfunction onInfiniteScroll(entries, observer) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting && !isFetching) {\n      fetchImages();\n    }\n  });\n}\n\nrefs.form.addEventListener('submit', onSearch);\n\nfunction onSearch(e) {\n  e.preventDefault();\n\n  imagesApiService.query = e.currentTarget.elements.searchQuery.value;\n\n  if (!imagesApiService.query) {\n    Notiflix.Notify.failure(\n      'Search box cannot be empty. Please enter the word.'\n    );\n    return;\n  }\n\n  imagesApiService.resetPage();\n  clearGalleryContainer();\n\n  fetchImages();\n  observer.observe(refs.jsGuard);\n\n  refs.form.reset();\n}\n\nfunction fetchImages() {\n  isFetching = true;\n  imagesApiService.fetchImages().then(({ totalHits, hits }) => {\n    if (hitsLength > totalHits) {\n      observer.unobserve(refs.jsGuard);\n      Notiflix.Notify.failure(\n        \"We're sorry, but you've reached the end of search results.\"\n      );\n      return;\n    } else if (hits.length === 0) {\n      Notiflix.Notify.failure(\n        'Sorry, there are no images matching your search query. Please try again.'\n      );\n      return;\n    } else {\n      Notiflix.Notify.success(`Hooray! We found ${hitsLength} images.`);\n\n      renderImagesCards(hits);\n\n      const lightbox = new SimpleLightbox('.gallery a', {\n        captionsData: 'alt',\n        captionDelay: 250,\n      });\n\n      lightbox.refresh();\n\n      hitsLength += hits.length;\n      isFetching = false;\n    }\n  });\n}\n\nfunction renderImagesCards(images) {\n  const markup = images\n    .map(\n      image =>\n        `<div class=\"photo-card\">\n  <a href=\"${image.largeImageURL}\" class=\"gallery__item\">\n    <img src=\"${image.webformatURL}\" alt=\"${image.tags}\" loading=\"lazy\" />\n  </a>\n  <div class=\"info\">\n    <p class=\"info-item\"><b>Likes</b>${image.likes}</p>\n    <p class=\"info-item\"><b>Views</b>${image.views}</p>\n    <p class=\"info-item\"><b>Comments</b>${image.comments}</p>\n    <p class=\"info-item\"><b>Downloads</b>${image.comments}</p>\n  </div>\n</div>`\n    )\n    .join('');\n\n  refs.galleryContainer.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction clearGalleryContainer() {\n  refs.galleryContainer.innerHTML = '';\n}\n"],"names":["$4CFr7","parcelRequire","$f3353f9eb86277b7$var$refs","form","document","querySelector","galleryContainer","jsGuard","$f3353f9eb86277b7$var$hitsLength","$f3353f9eb86277b7$var$isFetching","$f3353f9eb86277b7$var$imagesApiService","default","$f3353f9eb86277b7$var$observer","IntersectionObserver","entries","observer","forEach","entry","isIntersecting","$f3353f9eb86277b7$var$fetchImages","root","rootMargin","threshold","fetchImages","then","totalHits","hits","unobserve","$parcel$interopDefault","$eWCmQ","Notify","failure","length","success","images","markup","map","image","largeImageURL","webformatURL","tags","likes","views","comments","join","insertAdjacentHTML","$f3353f9eb86277b7$var$renderImagesCards","$fZKcF","captionsData","captionDelay","refresh","addEventListener","e","preventDefault","query","currentTarget","elements","searchQuery","value","resetPage","innerHTML","observe","reset"],"version":3,"file":"02-infinite-scroll.228959fa.js.map"}